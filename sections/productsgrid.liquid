{{ 'product-grid-gw.css' | asset_url | stylesheet_tag }}




{%- liquid
      assign collection_page = collections[section.settings.featured_collection]
      
    -%}
   
    

<div id="cart-list" class="card_product-container">
  {% for product in collection_page.products %}
  <script>console.log({{ product | json }})</script>
 

       <div class="card">
          <div class="card_product-header">
              <h2>{{ product.title }}</h2>
          </div>
          <div class="card_product-body">
              <img srcset="//cdn.shopify.com/s/files/1/0597/0044/5384/{{product.featured_image}}"  alt="" id="image{{product.id}}">
          </div>

          <div class="card_product-description">
              <span>{{ product.description }}</span>
          </div>
          <div class="card_product-price">
            <span id="price{{product.id}}">{{product.variants[0].price | money}}</span>
          </div>

          <div class="card_product-option">
             
                  {% for option in product.options_with_values %}

                      {% if option.name == "Talla" %}
                      
                        <div class="card_option-Select">
                            <select name="talla" 
                              class="selectSelected"     
                            >
                            {% for value in option.values %}
                              <option 
                                value="{{ value }}">
                                  {{value}}
                              </option>
                            {% endfor%}
                          </select>
                        </div>
                        
                      {% endif %}
              
                      
                    {% if option.name == "Color" %}
                      <!-- <label >{{ option.name }}</label> -->
                      <div class="card_option-radio">
                        {% for value in option.values %}

                        <label 
                        {% if product.variants[forloop.index0].available %}
                          onmouseover="changeOption(event)"  
                        {%else%}
                          onmouseover="msjAlert(true , {{product.id}})"
                        {% endif %}
                        class="option-radio"
                          style="background-color: {{product.variants[forloop.index0].metafields.color.value}}" 
                          disabled="disabled"                    
                          
                          >
                          <input 
                            id="color-{{ forloop.index0}}"  
                            class="radioSelect"    
                            type="radio" 
                            name="color{{product.id}}" 
                            value="{{ value }}" 
                          {%if forloop.first%}  
                            checked
                          {%endif%} 
                          />
                                                 
                        </label>
                      
                        {% endfor%}
                      </div>
                      
                    {% endif %}
                                
                  {% endfor%}     
      
          </div>

          <div class="card_product-add">
            <button type="button" name="bntAdd" class="add-cart"  data-id="{{product.id}}" onclick="addProduct(event)" >Add</button>
          </div>
          <div class="messages{{product.id}} global" >
            
          </div>
       
        </div>
  {%endfor%}      
</div>


<script>

function msjAlert(params, id){
  const card = document.querySelector(`.messages${id}`);
  if(params){
      
    card.innerHTML = "No disponible"

    setTimeout(() => {
      card.innerHTML = ""
    }, 1500);
  }
}

  const arrCollection = {{collections.all.products | json}}


  function changeOption(e){
    //console.log("change", e.target.querySelector('input'));
    const productCard = e.target.parentElement.parentElement.parentElement;
    e.target.querySelector('input').checked = true;
     const {id_product , varianObj} = readDateCard(productCard);
     const  imageObj  =  varianObj.featured_image.src;
    

     const image = document.querySelector(`#image${id_product}`);
           image.setAttribute('srcset', imageObj);
     const price = document.querySelector(`#price${id_product}`);
           price.innerHTML = formatterPeso.format(addDecimal(varianObj.price));
    
  } 
  
  
  function addProduct(e){
    e.preventDefault();
    if(e.target.classList.contains('add-cart')){
        //buscamos todo lo q tiene donde se hizo clic  
        const productCard = e.target.parentElement.parentElement;
        const {varianObj, id_product} = readDateCard(productCard);    
        addCarrito(varianObj.id, id_product);
    }
  }
  
  //sacamos los datos del segmentos en objeto
  function readDateCard(productCard){
   
        let id_product = Number(productCard.querySelector('button').getAttribute('data-id'));
        let option1 = productCard.querySelector("select").value;
        let option2 = productCard.querySelector(`input[name='color${id_product}']:checked`).value;
        //obtener id de la variacion 
        let compareVariantOption = `${option1} / ${option2}`;

        //Buscar variantes de producto
        const [arrProduct] = findVariantProduct(id_product);
        
        const varianObj = findIdVariant(arrProduct.variants, compareVariantOption);

        return {varianObj, id_product};
  
  }

  function findVariantProduct(id_product){
    
      const arrProduct = arrCollection.filter(product => {
          
          if(product.id === id_product){
            return product;
          }
      })
      return arrProduct;
  }

  function findIdVariant(variantsProductArr, compareVariantOption){

    let variantArr;
     variantsProductArr.filter(variant => {
       if(variant.title === compareVariantOption){
          variantArr = variant;
       }
     });

     return variantArr;
  }
  
  
  //agregando al carrito
  async function addCarrito(id_variant, id_product){
    
    let formData = {
        'items': [{
          'id': id_variant,
          'quantity': 1
          }]
        };

       const result = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        })
        
        const rs = await result.json();
          
   
          if(rs.status === 422){
            msjAlert(true, id_product);
          }else{
            loadCart();
            showCart();
          } 
       
        

  }


  const formatterPeso = new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          maximumFractionDigits: 2,
          minimumFractionDigits: 2
        });

  function addDecimal(num){
    //convierto a string
    num = num.toString();
    //separo los caracteres del string
    num = num.substring(0, num.length - 2);
    
    return parseFloat(num)

  }
  
  </script>
	


  {% schema %}
  {
    "name": "Customize products",
    "settings": [
      {
        "type": "collection",
        "id": "featured_collection",
        "label": "Featured collection"
      }
        ]
  }
  {% endschema %}